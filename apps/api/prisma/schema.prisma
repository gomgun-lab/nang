generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CredentialType {
  EMAIL
  OAUTH
}

enum Provider {
  EMAIL
  GOOGLE
}

model User {
  id            BigInt          @id @default(autoincrement())
  email         String          @unique
  name          String?
  avatarUrl     String?         @map("avatar_url")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  credentials   Credential[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Credential {
  id           BigInt         @id @default(autoincrement())
  userId       BigInt         @map("user_id")
  type         CredentialType @map("type")
  passwordHash String?        @map("password_hash")
  provider     Provider       @map("provider")
  providerId   String         @map("provider_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credentials")
}

model RefreshToken {
  id         BigInt     @id @default(autoincrement())
  userId     BigInt     @map("user_id")
  tokenHash  String     @map("token")
  expiresAt  DateTime   @map("expires_at")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  revokedAt  DateTime?  @map("revoked_at")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model VerificationToken {
  id         BigInt     @id @default(autoincrement())
  email      String     @map("email")
  token      String     @map("token")
  expiresAt  DateTime   @map("expires_at")
  createdAt  DateTime   @default(now()) @map("created_at")
  usedAt     DateTime?  @map("used_at")

  @@map("verification_tokens")
}